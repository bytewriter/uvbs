#!/bin/bash
# this file: /etc/uvbacksnap.conf (on production server, which will be sync'd to the 
#                                  backup (fail-over) server as /root/old/etc/uvbacksnap.conf )
# Mel - 2015-10-19 - this file cotains all editable variables for backsnap script
#                    I only put the #!/bin/bash in the first line to get vim to highlight nicely
# Mel - 2015-11-23 - added security option for those that do not understand security

# file to write logs to, if set to "SYSLOG", then messages will be sent through logger to syslog
logfile=/var/log/uvbacksnap

# loggerargs only need be set if above logfile is "SYSLOG" AND you need logger arguments
# such as sending to a remote syslog server, etc. If left blank and logfile="SYSLOG", then
# it will log through syslog. If your syslog is already configured to log to a remote
# syslog server and logfile above is "SYSLOG", then these logs will already go to the
# remote server through syslog.
#loggerargs="-n syslogserver"

# lockfile is used to determine if the script is already running. pid is stored here
lockfile=/var/run/uvbacksnap.pid

# uvbsstatusfile - status of uvbacksnap stores currrent status in this file.
# It is always just one line of text. You can use this for custom nrpe 
# checks, etc. Some sample of text that you might find in this file: 
# "Completed: Fri Oct 23 15:03:14 CDT 2015"
# "Failed: while rsyncing snapshots to 10.1.2.3"
# "In progress: rsyncing synccopiesof: /etc to 10.1.2.3:/root/old"
# For nrpe purposes, there are 3 possible status values: Completed,
# Failed, In progress. Followed by a colon (:), then followed by a detail
# field. The detail field may contain colons.
uvbsstatusfile="/etc/uvbs.status"

# directories to snapshot - space separated list. Full path directories! Not lvm's,
# not partial path.
dirstosnap="/u2 /uvtmp /koretech"

# alsosyncdirs - a space separated list of additional directories to rsync. These 
# shoud be directories that are not database directories, but that have things that 
# you might occasionally change on this server. Things like /usr/spool/uv, /root/bin, 
# /usr/local/sbin might be some examples. These directories will not use snapshot
# they will just be rsync'd from the given path to the matching path on targethost
alsosyncdirs="/usr/spool/uv /usr/local/bin /root/bin /usr/local/sbin"

# synccopiesof - a space separated list of additional directories that should not
# be synced to the matching directory on the targethost. Where they are sync'd to is
# in the placecopieshere option below. These are directories that would be really
# nice to have access to in case of disaster, but that can not, or should not be
# sync'd to the same directory on targethost because it can create conficts with 
# configurations, etc. Things like /etc or /home come to mind. These directories 
# will not use snapshot, they will just be rsync'd from the given path to the
# directory in placecopieshere below
synccopiesof="/etc"

# placecopieshere - directory on targethost where to send the above synccopiesof
# directories in synccopiesof above will be placed in here on the targethost.
# for example, if /etc is in synccopiesof, and placecopieshere contains /root/old
# then targethost will contain /root/old/etc
placecopieshere="/root/old"

# minpercent is the minimum allowed free space on a volumn group that is allowed.
# Snapshot sizing depends on many factors, including how much the original data
# is changing, and how long you need the snapshot to persist. Also, this number
# should be larger than the allocpercent below, to allow rounding. The duration
# of these snapshots is very short. For prod, they are typicaly kept for about
# 5 minutes. The largest change I have seen so far is about .08. But as the
# databases get bigger and the number of concurrent users increases, this may
# increase. 5% should cover us for a long long time
minpercent=12

# allocpercent is the percent of the original data partition that will be allocated
# for the snapshots. This needs to be large enough to accept all changes that
# will be done to the original data for as long as this snapshot will persist
allocpercent=12

# mountpoint is the directory where the snapshots will be mounted during the sync
# if this directory does not exist, it will be created
uvbsmount=/uvbacksnap

# targethost - is the ip address of the backup server that all the data files
# will be sent to - a cross-over cable can keep the traffic off the main network
# note: keys must already be configured between this host and targethost
# unless security below is set to off. In which case, you are in the wrong
# profession and you need to get another job, or possibly be promoted out of
# this position.
targethost=10.255.225.244

# security - added at special request of the lobotomized. This should not be
# set to off, ever. Setting this to off causes data to be sent un-encrypted
# over the network, not requiring keys, and using just rsync. I did not test
# this, and it probably won't work. If you set this to off, then targethost
# needs a writeable modulename in rsyncd.conf below. Possible values are "off"
# anything else is on
security="on"

# snapmodule - only if security is off, use this writable module name to send
# snapshots to - must be configured in rsyncd.conf on targethost
snapmodule="tard"

# alsomodule - only if security is off, use this writable module name to send
# alsosyncdirs to. Severely limits what alsosyncdirs that you can use, because
# they must all be relative to the rsync module path, unless you do some
# fancy links
alsomodule="braindead"

# copiesmodule - only if security is off, use this writable module name to send
# synccopiesof to.
copiesmodule="cio"

# the email address that emails from the script will appear to be coming from
EMAIL="Mel <linux@example.com>"

# errormail is a space separated list of emails that will be sent emails only when there are errors
errormail="linux@example.com"

# okmail is a space separated list of emails that will be sent emails whenever a backup 
# completes normally. If left blank, no email will be sent.
okmail=""

# backup server where the compressed backups (being done on the DR server due to hyper-v fail)
# should be sent to
backupserver="backup-linux"

# directory on the backup server to store these backups in
backupserverdir="/backup/eclipse-prod"
